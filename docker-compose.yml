version: '3.8'  # Version des Docker Compose-Formats

services:
  stock-publisher:
    image: towak/stock-publisher:latest  # Docker-Image für den Stock Publisher
    container_name: stock-publisher  # Name des Containers
    restart: always  # Container immer neu starten, falls er abstürzt
    environment:
      - RABBITMQ_URL=amqp://user:user@rabbitmq:5672/  # RabbitMQ-Verbindungs-URL
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  rabbitmq:
    image: rabbitmq:3-management  # Docker-Image für RabbitMQ mit Management-Plugin
    container_name: rabbitmq  # Name des Containers
    ports:
      - "5672:5672"  # Port für AMQP
      - "15672:15672"  # Port für RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user  # Standardbenutzername für RabbitMQ
      RABBITMQ_DEFAULT_PASS: user  # Standardpasswort für RabbitMQ
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  mongo1:
    image: mongo:7.0  # Docker-Image für MongoDB
    container_name: mongo1  # Name des Containers
    restart: always  # Container immer neu starten, falls er abstürzt
    ports:
      - 27017:27017  # Port für MongoDB
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]  # MongoDB-Kommando zur Initialisierung des Replikat-Sets
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Ermöglicht den Zugriff auf den Host
    volumes:
      - "mongo1_data:/data/db"  # Datenvolumen für MongoDB-Daten
      - "mongo1_config:/data/configdb"  # Datenvolumen für MongoDB-Konfigurationsdaten
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet  # Healthcheck-Kommando zur Überprüfung des Replikat-Sets
      interval: 5s  # Intervall zwischen den Healthchecks
      timeout: 30s  # Timeout für den Healthcheck
      start_period: 0s  # Startperiode für den Healthcheck
      retries: 30  # Anzahl der Wiederholungen für den Healthcheck
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  mongo2:
    image: mongo:7.0  # Docker-Image für MongoDB
    container_name: mongo2  # Name des Containers
    restart: always  # Container immer neu starten, falls er abstürzt
    ports:
      - 27018:27017  # Port für MongoDB
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]  # MongoDB-Kommando zur Initialisierung des Replikat-Sets
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Ermöglicht den Zugriff auf den Host
    volumes:
      - "mongo2_data:/data/db"  # Datenvolumen für MongoDB-Daten
      - "mongo2_config:/data/configdb"  # Datenvolumen für MongoDB-Konfigurationsdaten
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  mongo3:
    image: mongo:7.0  # Docker-Image für MongoDB
    container_name: mongo3  # Name des Containers
    restart: always  # Container immer neu starten, falls er abstürzt
    ports:
      - 27019:27017  # Port für MongoDB
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]  # MongoDB-Kommando zur Initialisierung des Replikat-Sets
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Ermöglicht den Zugriff auf den Host
    volumes:
      - "mongo3_data:/data/db"  # Datenvolumen für MongoDB-Daten
      - "mongo3_config:/data/configdb"  # Datenvolumen für MongoDB-Konfigurationsdaten
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  consumer-tsla:
    image: simonchhit/consumer:latest  # Docker-Image für den TSLA-Consumer
    container_name: consumer-tsla  # Name des Containers
    environment:
      RABBITMQ_HOST: rabbitmq  # RabbitMQ-Host
      RABBITMQ_QUEUE: TSLA  # RabbitMQ-Warteschlange
      RABBITMQ_USER: user  # RabbitMQ-Benutzername
      RABBITMQ_PASS: user  # RabbitMQ-Passwort
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0  # MongoDB-URI für das Replikat-Set
      MONGODB_DATABASE: finance  # Name der MongoDB-Datenbank
      MONGODB_COLLECTION: aggregated_prices  # Name der MongoDB-Sammlung
    depends_on:
      - rabbitmq  # Abhängigkeit von RabbitMQ
      - mongo1  # Abhängigkeit von MongoDB-Instanz 1
      - mongo2  # Abhängigkeit von MongoDB-Instanz 2
      - mongo3  # Abhängigkeit von MongoDB-Instanz 3
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  consumer-aapl:
    image: simonchhit/consumer:latest  # Docker-Image für den AAPL-Consumer
    container_name: consumer-aapl  # Name des Containers
    environment:
      RABBITMQ_HOST: rabbitmq  # RabbitMQ-Host
      RABBITMQ_QUEUE: AAPL  # RabbitMQ-Warteschlange
      RABBITMQ_USER: user  # RabbitMQ-Benutzername
      RABBITMQ_PASS: user  # RabbitMQ-Passwort
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0  # MongoDB-URI für das Replikat-Set
      MONGODB_DATABASE: finance  # Name der MongoDB-Datenbank
      MONGODB_COLLECTION: aggregated_prices  # Name der MongoDB-Sammlung
    depends_on:
      - rabbitmq  # Abhängigkeit von RabbitMQ
      - mongo1  # Abhängigkeit von MongoDB-Instanz 1
      - mongo2  # Abhängigkeit von MongoDB-Instanz 2
      - mongo3  # Abhängigkeit von MongoDB-Instanz 3
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  consumer-msft:
    image: simonchhit/consumer:latest  # Docker-Image für den MSFT-Consumer
    container_name: consumer-msft  # Name des Containers
    environment:
      RABBITMQ_HOST: rabbitmq  # RabbitMQ-Host
      RABBITMQ_QUEUE: MSFT  # RabbitMQ-Warteschlange
      RABBITMQ_USER: user  # RabbitMQ-Benutzername
      RABBITMQ_PASS: user  # RabbitMQ-Passwort
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0  # MongoDB-URI für das Replikat-Set
      MONGODB_DATABASE: finance  # Name der MongoDB-Datenbank
      MONGODB_COLLECTION: aggregated_prices  # Name der MongoDB-Sammlung
    depends_on:
      - rabbitmq  # Abhängigkeit von RabbitMQ
      - mongo1  # Abhängigkeit von MongoDB-Instanz 1
      - mongo2  # Abhängigkeit von MongoDB-Instanz 2
      - mongo3  # Abhängigkeit von MongoDB-Instanz 3
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

  frontend1:
    image: towak/stock-liveview:latest  # Docker-Image für das Frontend
    container_name: frontend1  # Name des Containers
    environment:
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0  # MongoDB-URI für das Replikat-Set
      MONGODB_DATABASE: finance  # Name der MongoDB-Datenbank
      MONGODB_COLLECTION: aggregated_prices  # Name der MongoDB-Sammlung
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft
    expose:
      - "3000"  # Port, der vom Container freigegeben wird

  frontend2:
    image: towak/stock-liveview:latest  # Docker-Image für das Frontend
    container_name: frontend2  # Name des Containers
    environment:
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0  # MongoDB-URI für das Replikat-Set
      MONGODB_DATABASE: finance  # Name der MongoDB-Datenbank
      MONGODB_COLLECTION: aggregated_prices  # Name der MongoDB-Sammlung
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft
    expose:
      - "3000"  # Port, der vom Container freigegeben wird

  nginx:
    image: nginx:latest  # Docker-Image für Nginx
    container_name: nginx-loadbalancer  # Name des Containers
    ports:
      - "3000:80"  # Port-Mapping für Nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Nginx-Konfigurationsdatei
    depends_on:
      - frontend1  # Abhängigkeit von Frontend1
      - frontend2  # Abhängigkeit von Frontend2
    networks:
      - mongo_cluster  # Netzwerk, in dem der Dienst läuft

volumes:
  mongo1_data:  # Datenvolumen für MongoDB-Instanz 1
  mongo1_config:  # Konfigurationsvolumen für MongoDB-Instanz 1
  mongo2_data:  # Datenvolumen für MongoDB-Instanz 2
  mongo2_config:  # Konfigurationsvolumen für MongoDB-Instanz 2
  mongo3_data:  # Datenvolumen für MongoDB-Instanz 3
  mongo3_config:  # Konfigurationsvolumen für MongoDB-Instanz 3

networks:
  mongo_cluster:
    driver: bridge  # Netzwerk-Treiber für das MongoDB-Cluster-Netzwerk